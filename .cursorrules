---
description: "Shadcn + Rails + Supabase + Clerk development rules with pre-implementation audit"
globs:
  - "**/*"
---

# DEVELOPMENT RULES
# Tech Stack: shadcn/ui Frontend + Ruby on Rails API + Supabase DB + Clerk Auth + Heroku

## 1. MANDATORY PRE-IMPLEMENTATION AUDIT

**Before writing any code:**

1. Search the codebase for existing implementations:
   - **Frontend**: shadcn/ui components, React hooks, utility functions
   - **Backend**: Rails controllers, models, services, serializers
   - **Database**: Supabase tables, RLS policies, functions, triggers
   - **Auth**: Clerk webhooks, user management, role-based access
   - **API**: Rails routes, API endpoints, middleware
   - **Deployment**: Heroku configs, Procfile, buildpacks
   - **Shared**: Types/interfaces, constants, validation schemas

2. Document findings in `./_audit/<feature>.md`:
   ```markdown
   ## Audit Summary
   - **shadcn/ui components to reuse**: 
   - **Rails patterns to follow**: 
   - **Supabase schema dependencies**: 
   - **Clerk auth integration points**: 
   - **Heroku deployment considerations**: 
   - **Environment variables needed**: 
   - **Database migrations required**: 
   - **API endpoints to create/modify**: 
   ```

3. **NO CODE UNTIL AUDIT IS COMPLETE**
   - Prevents duplication
   - Ensures consistency
   - Reduces technical debt
   - Maintains architectural patterns

## 2. ENVIRONMENT CONFIGURATION

**Single .env File Enforcement:**
- **ONLY** use `.env` in project root
- **NO** multiple env files (.env.local, .env.development, etc.)
- All configuration through single source of truth
- Heroku config vars mirror .env structure

**Required Environment Variables:**
```env
# Supabase Database
SUPABASE_URL=https://your-project.supabase.co
SUPABASE_ANON_KEY=your-anon-key
SUPABASE_SERVICE_KEY=your-service-key
DATABASE_URL=postgresql://postgres:[password]@db.[project].supabase.co:5432/postgres

# Clerk Authentication
NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_...
CLERK_SECRET_KEY=sk_test_...
NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/dashboard
NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/onboarding

# Rails API
RAILS_ENV=development
SECRET_KEY_BASE=your-secret-key
CORS_ORIGINS=http://localhost:3000,https://your-app.vercel.app

# Heroku Production
HEROKU_APP_NAME=your-app-name
BUILDPACK_URL=heroku/ruby

# Feature Flags
FEATURE_ADVANCED_ANALYTICS=false
FEATURE_NEW_UI=true
```

## 3. STANDARDIZED LOCAL SERVER START

**Frontend (Next.js + shadcn/ui):**
```json
{
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "type-check": "tsc --noEmit"
  }
}
```

**Backend (Rails API):**
```ruby
# In Gemfile, ensure:
gem 'rails', '~> 7.0'
gem 'pg' # for Supabase PostgreSQL
gem 'rack-cors'
gem 'clerk-sdk-ruby'
```

**Development workflow:**
1. **Frontend**: `npm install && npm run dev` (port 3000)
2. **Backend**: `bundle install && rails server` (port 3001)
3. **Database**: Supabase handles hosting, use migrations for schema
4. **Auth**: Clerk webhooks for user sync to Rails
5. **Deploy**: `git push heroku main` for Rails API

## 4. TECH STACK SPECIFIC PATTERNS

**Frontend (shadcn/ui + Next.js):**
- Use `components/ui/` for shadcn components
- Custom components in `components/` (PascalCase)
- Hooks in `hooks/` with `use` prefix
- Types in `types/` or `lib/types.ts`
- API calls in `lib/api/` with proper error handling
- Use `cn()` utility for conditional classes

**Backend (Rails API):**
- Controllers in `app/controllers/api/v1/`
- Models with proper validations and associations
- Services in `app/services/` for business logic
- Serializers in `app/serializers/` for JSON responses
- Middleware for CORS and Clerk auth verification

**Database (Supabase):**
- Use Rails migrations for schema changes
- Implement Row Level Security (RLS) policies
- Leverage Supabase functions for complex queries
- Use proper indexes for performance

**Authentication (Clerk):**
- Protect API routes with Clerk middleware
- Sync user data via webhooks to Rails
- Use Clerk's `useUser()` hook in frontend
- Implement role-based access control

## 5. DATABASE & SUPABASE INTEGRATION

**Rails Migration Rules:**
- Create Rails migrations: `rails generate migration AddTableName`
- Run locally: `rails db:migrate`
- Apply to Supabase: Use Supabase dashboard or SQL editor
- Always create reversible migrations with `up` and `down`

**Supabase Specific:**
- Enable RLS on all tables: `ALTER TABLE table_name ENABLE ROW LEVEL SECURITY;`
- Create policies for user access control
- Use Supabase functions for complex business logic
- Leverage real-time subscriptions where needed
- Store files in Supabase Storage with proper bucket policies

**Schema Design:**
- Use UUIDs for primary keys (Supabase default)
- Include `created_at` and `updated_at` timestamps
- Add proper foreign key constraints
- Consider partitioning for large tables

## 6. SECURITY & CLERK INTEGRATION

**Clerk Authentication:**
- Frontend: Use `@clerk/nextjs` middleware
- Backend: Verify JWT tokens with `clerk-sdk-ruby`
- Implement webhook endpoints for user sync
- Use Clerk's user metadata for roles/permissions

**API Security:**
- Validate Clerk tokens on all protected routes
- Implement CORS properly for frontend domain
- Use Rails strong parameters for input validation
- Apply rate limiting on API endpoints

**Supabase Security:**
- Enable RLS on all user-facing tables
- Create policies based on Clerk user ID
- Use service key only in backend, never frontend
- Implement proper bucket policies for file uploads

**Environment Security:**
- Use Heroku config vars for production secrets
- Rotate API keys regularly
- Never log sensitive information
- Implement proper error handling without exposing internals

## 7. HEROKU DEPLOYMENT & MONITORING

**Heroku Setup:**
- Rails API: Deploy to Heroku with Ruby buildpack
- Frontend: Deploy to Vercel/Netlify (or Heroku with Node.js)
- Configure Heroku Postgres add-on if needed for caching
- Set up Heroku config vars matching .env structure

**Pre-deployment Checklist:**
- [ ] Audit completed and documented
- [ ] Frontend builds successfully (`npm run build`)
- [ ] Rails tests passing (`rails test`)
- [ ] Supabase migrations applied
- [ ] Clerk webhooks configured
- [ ] Heroku config vars set
- [ ] CORS origins updated for production
- [ ] Error tracking configured (Sentry/Rollbar)

**Production Monitoring:**
- Use Heroku metrics for Rails API performance
- Monitor Supabase dashboard for database performance
- Set up Clerk webhook monitoring
- Implement health check endpoints
- Use structured logging with Rails logger
- Monitor API response times and error rates
